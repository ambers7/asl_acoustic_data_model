#https://docs.pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html
import torch
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import numpy as np
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim


    

if __name__ == "__main__":

    transform = transforms.Compose(
        [transforms.ToTensor(), #convert images from PIL image or NumPy array to a Pytorch tensor, scales pixel values to [0,1]
        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]) #normalizes tensor image w/ mean of 0.5 and stdev 0.5 for each color channel R,G,B (centers data around 0 and scales it to range [-1,1])

    batch_size = 4 # number of images that will be processed together in each batch during training and testing

    trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                            download=True, transform=transform) #downloads CIFAR10 dataset and applies transform to the images (the transformations from above)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size, #creates a data loader for the training set (a data loader provides an iterable over the dataset and maeks it easy to loop through)
                                            shuffle=True , num_workers=2) #shuffles the data in each epoch, uses two subprocesses to load data- model can load and preprocess next batch of data in parallel w/ model training on current batch

    testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                        download=True, transform=transform)
    testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                            shuffle=False, num_workers=2)

    classes = ('plane', 'car', 'bird', 'cat',
            'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

    # functions to show an image


    def imshow(img):
        img = img / 2 + 0.5     # unnormalize (scale pixel values back to [0,1])
        npimg = img.numpy() #converts pytorch tensor image to a numpy array (needed for matplotlib)
        plt.imshow(np.transpose(npimg, (1, 2, 0))) #displays the image, transpose reorders dimensions of the array from color_channels, height, width to height, width, color_channels (needed fo rmatplotlib)
        plt.show()


    # get some random training images
    dataiter = iter(trainloader) #creates an iterator from trainloader
    images, labels = next(dataiter) #gets next batch of images and corresponding labels from iterator

    # show images
    imshow(torchvision.utils.make_grid(images)) #displays grid of images in the batch, arranges the images into a grid for easier visualization
    # print labels
    print(' '.join(f'{classes[labels[j]]:5s}' for j in range(batch_size))) #prints labels for each image- output is 5 characters wide for each label

    class Net(nn.Module): #class named Net that inherits from nn.Module (standard way to define neural network models in pytorch)
        '''below is pytorch tutorial: accuracy of 55%
         copilot version: accuracy of 52%
         
           '''

        def __init__(self):
            super().__init__()
            self.conv1 = nn.Conv2d(3, 6, 5)#first convolutional layer- 3 input channels (for rbg images), outputs 6 channels, uses 5x5 filter size
            '''for images, input channels typically represent the diff color components (ex rbg -> 3 input channels, grayscale -> 1 input channel)
            - move deeper into a cnn: input channels to the next layer are output channels from the previous layer
            output channels: # of feature maps the layer produces; generated by applying a different kernel (filter) to the input channels
            kernel/filter: small matrix of weights that slides over the input data during the convolutional operation
            - kernel's values are learned during the training process

            deciding the number of output channels:
            '''
            self.pool = nn.MaxPool2d(2, 2) #max pooling layer with a 2x2 window and a stride of 2; reduces the spatial dimensions of the feature maps
            ''' max pooling layer: layer used in cnns to reduce the spatial size of the feature maps (reduce height and width)
            - reduces # of parameters and computations in the network
            stride: # of pixels the kernel or pooling window shifts at each step as it moves across the input
            - stride of 2 means the kernel moves 2 pixels at a time: significantly reduces spatial size of the output feature map
            (stride of 1 is the default)
            --> (2, 2): pooling window size is 2x2, stride = 2 -> pooling layer looks at 2x2 blocks of pixels and shifts
            2 pixels horizontally and vertically after each operation (effectively reduces height and width of the input feature map by half)

            stride equal to pooling window size is very common: ensures non-overlapping pooling regions and reduces the spatial dimensions by a factor equal to the stride
            '''
            self.conv2 = nn.Conv2d(6, 16, 5) #2nd convolutional layer: 6 input channels (from prev layer), outputs 16 channels, uses 5x5 kernel size
            '''want to get deeper as it goes; 16 is power of 2 which is common (6->16->32->64)'''
            self.fc1 = nn.Linear(16 * 5 * 5, 120) #defines the first fully connected (linear) layer. input size 16*5*5 is from flattened output of previous convolutional and pooling layers. has 120 output units
            '''
            linear layer/fully connected layer/dense layer: layer where every input neuron is connected to every output neuron with a learnable weight
            - performs a linear transformation on the input data: output = input * weight + bias
            - after convolutional & pooling layers have extracted and summarized features from the image, the linear layers
            take these flattened features and use them to make the final classification decision
            16*5*5: 16 is # of output channels from 2nd convolutional layer; 5*5 is height and width of each of 16 feature maps after
            they've passed through both the convolutional layers and both max pooling layers
            120: number of output units in the fully connected layer; hyperparameter chosen by the network designer, represents the number of neurons in the hidden fully connected layer

            '''
            self.fc2 = nn.Linear(120, 84) #second fully connected layer: 120 input units, 84 output
            self.fc3 = nn.Linear(84, 10) #3rd fully connected layer: 84 input units, 10 output units; 10 output units correspond to the 10 classes in the dataset

        def forward(self, x): #defines the forward pass of the network: describes how input data x flows through the layers
        #forward pass: process of feeding input data through neural network from input layer through all the hidden layers to the output layer
            x = self.pool(F.relu(self.conv1(x))) #applies the first convolutional layer, then the ReLU activation function, then the max pooling layer
            ''' ReLU: activation function- outputs input directly if its positive, 0 if 0 or negative
            '''
            x = self.pool(F.relu(self.conv2(x)))
            x = torch.flatten(x, 1) # flatten all dimensions except batch (# of samples in the batch)
            x = F.relu(self.fc1(x)) #applies first fully connected layer followed by ReLU
            x = F.relu(self.fc2(x))
            x = self.fc3(x) #output of this layer represents raw scores (logits) for each class: raw unnormalized scores that a neural network outputs from its final layer before applying a final activation function
            #logits represent the networks confidence in each class for a given input
            return x


    net = Net() #initializes the nerual network model


    criterion = nn.CrossEntropyLoss() #defines the loss function- want to minimize this loss function
    optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9) #optimizer: SGD (Stochastic gradient descent); lr: learning rate; momentum: accelerates SGD in relevant direction

    for epoch in range(2):  # loop over the dataset multiple times: 2 epochs (epoch: a pass over the entire dataset)

        running_loss = 0.0 #keeps track of loss during each mini-batch
        for i, data in enumerate(trainloader, 0): #enumeration starts from 0
            # get the inputs; data is a list of [inputs, labels]
            inputs, labels = data

            # zero the parameter gradients: by default gradients accumulate so if dont zero out then gradients from current mini-batches get added to gradients from prev mini-batches -> incorrect updates
            optimizer.zero_grad()

            # forward + backward + optimize
            outputs = net(inputs) #forward pass: inputs (mini-batch of images) is fed into net (the network) -> outputs (logits for each image in the patch)
            loss = criterion(outputs, labels) #calculates loss; criterion (CrossEntropyLoss) compares the networks outputs w/ the true labels to quantify how well the network is performing
            loss.backward() #backward pass: pytorch computes the gradients of loss w/ respect to all networks parameters that require gradients
            #the gradients indicate hwo much each parameter needs to reduce the loss
            '''gradient (calclus): direction and rate of sttepest increase of loss function w/ respect to inputs (the model's parameters- weights and biases)
            '''
            optimizer.step() #updates the networks parameters: uses gradients computed during the backward pass to adjust the weights and biases of the network in a direction that minimizes the loss

            # print statistics
            running_loss += loss.item() #accumulates the loss for the current mini-batch
            if i % 2000 == 1999:    # print every 2000 mini-batches
                print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}') #print current epoch number and current mini-batch, and average loss over last 2000 batches rounded to 3 decimal places
                running_loss = 0.0 #resets running_loss after printing statistics for last 2000 lines

    print('Finished Training')

    #save trained model
    PATH = './cifar_net.pth'
    torch.save(net.state_dict(), PATH)

    #test model:
    dataiter = iter(testloader)
    images, labels = next(dataiter)


    #display an image form the test set

    # print images
    imshow(torchvision.utils.make_grid(images))
    print('GroundTruth: ', ' '.join(f'{classes[labels[j]]:5s}' for j in range(4)))

    #load back into saved model (not necessary)
    net = Net()
    net.load_state_dict(torch.load(PATH, weights_only=True)) #weights_only = True: only loading model's learned parameters and not other potential metadat
    #takes the loaded state dictionary (containing the saved weights and biases) and loads them into the corresponding layers of the net instance

    #see what the model thinks the above images are
    outputs = net(images)

    #outputs are the energies for the 10 classes- the higher the energy, the more the network thinks the image is of that class
    # -> get the index of the highest energy
    _, predicted = torch.max(outputs, 1) #_ ignores max value itself- we only need the index

    print('Predicted: ', ' '.join(f'{classes[predicted[j]]:5s}'
                                for j in range(4)))

    correct = 0
    total = 0
    # since we're not training, we don't need to calculate the gradients for our outputs
    with torch.no_grad(): #disabling gradient calculation saves memory and speeds up computations
        for data in testloader:
            images, labels = data
            # calculate outputs by running images through the network
            outputs = net(images)
            # the class with the highest energy is what we choose as prediction
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item() #calculates # of correct predictions in the current batch and adds it to the correct count

    print(f'Accuracy of the network on the 10000 test images: {100 * correct // total} %')

    # prepare to count predictions for each class
    correct_pred = {classname: 0 for classname in classes}
    total_pred = {classname: 0 for classname in classes}

    # again no gradients needed
    with torch.no_grad():
        for data in testloader:
            images, labels = data
            outputs = net(images)
            _, predictions = torch.max(outputs, 1)
            # collect the correct predictions for each class
            for label, prediction in zip(labels, predictions): #loop thru true labels and predicted labels for each image w/in current batch
            #zip: pairs up corresponding true and predicted labels
                if label == prediction:
                    correct_pred[classes[label]] += 1 #if prediction correct increment count in correct_pred
                total_pred[classes[label]] += 1 #increments total count, regardless of whether prediction was correct or not2qq


    # print accuracy for each class
    for classname, correct_count in correct_pred.items():
        accuracy = 100 * float(correct_count) / total_pred[classname]
        print(f'Accuracy for class: {classname:5s} is {accuracy:.1f} %')